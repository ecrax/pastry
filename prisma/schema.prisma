// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Group {
    id         String        @id @default(uuid())
    created_at DateTime      @default(now())
    users      UserOnGroup[]
    owner      User          @relation(fields: [owner_id], references: [id])
    owner_id   String
    name       String
    pastes     Paste[]
}

model Paste {
    id            String   @id @default(uuid())
    created_at    DateTime @default(now())
    created_by    User     @relation(fields: [created_by_id], references: [id])
    created_by_id String
    content       String
    group         Group    @relation(fields: [group_id], references: [id])
    group_id      String
}

model UserOnGroup {
    user     User   @relation(fields: [user_id], references: [id])
    group    Group  @relation(fields: [group_id], references: [id])
    user_id  String
    group_id String

    @@id([user_id, group_id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    groups        UserOnGroup[]
    owns          Group[]
    pastes        Paste[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
